<!DOCTYPE html>
<html>
<head>
  <title>Favorites</title>
  <link rel="stylesheet" href="/styles.css">
  <script src="/socket.io/socket.io.js"></script>  </head>
<body>
  <a href="/all" class="show-all-link">Show All Entries</a>
  <form action="/logout" method="POST" style="position: absolute; top: 30px; right: 10px;">
    <button type="submit">Log Out</button>
  </form>
  <a href="/favorites" class="show-favorites-link">Show Favorites</a>

  <h1>Favorites</h1>

  <% if (favorites.length === 0) { %>
  <p>You have no favorites yet.</p>
  <% } else { %>
  <div class="card-container">
    <% favorites.forEach(favorite => { %>
    <div class="card" data-card-id="<%= favorite.id %>" data-subject="<%= favorite.subject %>">
      <div class="card-header">
        <span class="card-title"><h1><strong><%= favorite.title %></strong></h1></span>
        <span 
          class="favorite-star" 
          data-card-id="<%= favorite.id %>" 
          data-favorite="<%= favorite.isFavorite %>"  // Store favorite status in data attribute
          style="color: <%= favorite.isFavorite? 'yellow': 'gray' %>;"
          >
          &#9733;
        </span>
      </div>
      <div class="card-body">
        <p><strong>Lesson:</strong> <%= favorite.lesson %></p>
        <p><strong>Subject:</strong> <%= favorite.subject %></p>
        <p><strong>Timestamp:</strong> <%= favorite.timestamp %></p>
        <p><strong>Volume:</strong> <%= favorite.volume %></p>
        <p><strong>Page:</strong> <%= favorite.page %></p>
        <p><strong>Description:</strong> <%= favorite.description %></p>
        <p><strong>Book Description:</strong> <%= favorite.book_description %></p>
        <p><strong>Inventor:</strong> <%= favorite.inventor %></p>
      </div>
    </div>
    <% }); %>
  </div>
  <% } %>

  <a href="/">Back to Search</a>

  <script>
    // Initialize Socket.IO client to listen for real-time updates
    const socket = io();

    // Event listener for 'favorite-removed' events, triggered when a favorite is removed elsewhere
    socket.on('favorite-removed', (removedCardId) => {
      // Find the card element to remove using its data-card-id
      const cardToRemove = document.querySelector(`[data-card-id="${removedCardId}"]`);
      if (cardToRemove) {
        cardToRemove.remove(); // Remove the card from the DOM
      }
    });

    const stars = document.querySelectorAll('.favorite-star');
    stars.forEach(star => {
      star.addEventListener('click', () => {
        const cardId = star.dataset.cardId;
        const userId = <%= user? user.user_id: null %>; // Get User ID from server-side rendering
        console.log("STAR User ID:", userId);
        console.log("STAR Card ID:", cardId);
        toggleFavorite(cardId, userId);
      });
    });

    // Function to toggle favorite status via AJAX call to the server
    function toggleFavorite(cardId, userId) {
      console.log("RESULTS.EJS User ID:", userId);
      console.log("RESULTS.EJS Card ID:", cardId);
      fetch('/toggle-favorite', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ cardId: cardId, userId: userId })
      })
      .then(response => {
        if (!response.ok) {
          console.error('Network response was not ok');
          return; // Stop execution to avoid errors
        }
        return response.json();
      })
      .then(data => {
        console.log("Server Response:", data);
        const star = document.querySelector(`.favorite-star[data-card-id="${cardId}"]`);
        if (data.isFavorite) {
          star.style.color = 'yellow'; // Update star color based on server response
        } else {
          star.style.color = 'gray';
        }
        // Emit socket.io event if favorite was removed on this client
        if (!data.isFavorite) {
            socket.emit('favorite-removed', cardId);
        }
      })
      .catch(error => {
        console.error('Error toggling favorite:', error);
      });
    }
  </script>
</body>
</html>