<!DOCTYPE html>
<html>
<%- include('./partials/header') %>
<title>Random Card</title>
<body>

  <h1>Random Card</h1>

  <div class="random-card-container">
    <% if (card) { %>
      <div class="card random-card" data-card-id="<%= card.id %>">
        <div class="card-header">
          <span class="card-title">
            <h1><strong><%= card.title %></strong></h1>
          </span>
          <span class="favorite-star" data-card-id="<%= card.id %>" style="color: <%= card.isFavorite? 'yellow': 'gray' %>;">&#9733;</span>
        </div>
        <div class="card-body">
          <input type="checkbox" class="card-checkbox" data-card-id="<%= card.id %>">
          <p><strong>Lesson:</strong> <%= card.lesson %></p>
          <p><strong>Subject:</strong> <%= card.subject %></p>
          <p><strong>Timestamp:</strong> <%= card.timestamp %></p>
          <p><strong>Volume:</strong> <%= card.volume %></p>
          <p><strong>Page:</strong> <%= card.page %></p>
          <p><strong>Description:</strong> <%= card.description %></p>
          <p><strong>Book Description:</strong> <%= card.book_description %></p>
          <p><strong>Inventor:</strong> <%= card.inventor %></p>
        </div>
      </div>
    <% } else { %>
      <p>No random card found.</p>
    <% } %>
  </div>

  <div class="list-selection">
    <label for="list-select">Select a list:</label>
    <select id="list-select">
      <% lists.forEach(list => { %>
        <option value="<%= list.list_id %>"><%= list.list_name %></option>
      <% }); %>
    </select>
    <button id="add-to-list-button">Add to List</button>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      console.log("DOM fully loaded and parsed.");

      // Get all favorite stars
      const stars = document.querySelectorAll('.favorite-star');

      // Add event listener to each star for toggling favorites
      stars.forEach(star => {
        star.addEventListener('click', () => {
          const cardId = star.dataset.cardId;
          const userId = <%= user ? user.user_id : null %>;
          console.log("STAR User ID:", userId);
          console.log("STAR Card ID:", cardId);
          star.classList.toggle('active'); // visually toggle star appearance
          toggleFavorite(cardId, userId);
        });
      });

      // Function to toggle favorite status via AJAX call
      function toggleFavorite(cardId, userId) {
        console.log("RESULTS.EJS User ID:", userId);
        console.log("RESULTS.EJS Card ID:", cardId);
        fetch('/toggle-favorite', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              cardId: cardId,
              userId: userId
            })
          })
          .then(response => {
            if (!response.ok) {
              console.error('Network response was not ok');
              return;
            }
            return response.json();
          })
          .then(data => {
            console.log("Server Response:", data);
            const star = document.querySelector(`.favorite-star[data-card-id="${cardId}"]`);
            if (data.isFavorite) {
              star.style.color = 'yellow';
            } else {
              star.style.color = 'gray';
            }
          })
          .catch(error => {
            console.error('Error toggling favorite:', error);
          });
      }

      // Add-to-list button functionality
      const addToListButton = document.getElementById('add-to-list-button');

      addToListButton.addEventListener('click', async () => {
        console.log("Add to List button clicked.");

        const selectedCardIds = []; // Initialize selectedCardIds as an array
        document.querySelectorAll('.card-checkbox:checked').forEach(checkbox => {
          console.log("Checked card ID:", checkbox.dataset.cardId); // Log checked card IDs
          selectedCardIds.push(checkbox.dataset.cardId);
        });

        if (selectedCardIds.length === 0) {
          console.warn("No cards selected.");
          alert("Please select at least one card to add to a list.");
          return;
        }

        const selectedListId = document.getElementById('list-select').value;
        console.log("Selected List ID:", selectedListId); // Log selected list ID

        if (!selectedListId) {
          console.warn("No list selected.");
          alert("Please select a list to add cards to.");
          return;
        }

        try {
          console.log("Sending request to add cards to list...");
          const response = await fetch('/add-cards-to-list', { // Corrected route
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              cardIds: selectedCardIds,
              listId: selectedListId
            })
          });

          console.log("Response status:", response.status);

          if (response.ok) {
            const responseData = await response.json();
            console.log("Add-to-list success response:", responseData);
            alert('Cards added to list successfully!');
          } else {
            const errorData = await response.json();
            console.error('Failed to add cards to list:', errorData.error);
            alert(`Error: ${errorData.error}`);
          }
        } catch (error) {
          console.error('Error adding cards to list:', error);
          alert("An unexpected error occurred while adding cards to the list.");
        }
      });
    });
  </script>

</body>
</html>